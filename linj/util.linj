(package linj)
(custom-import "import static java.lang.Math.PI;")

(defun string-capitalize (string/string &key (start 0) (end (length string)))
  (let ((newstring (new 'string-buffer string)))
    (do ((index start (1+ index))
         (newword t))
        ((= index end))
      (let ((char (char string index)))
        (cond ((not (alphanumericp char))
               (setq newword t))
              (newword
               ;;char is first case-modifiable after non-case-modifiable
               (setq char (char-upcase char))
               (setq newword nil))
              ;;char is case-modifiable, but not first
              (t
               (setq char (char-downcase char))))
        (setf (char newstring index) char)))
    (to-string newstring)))

(defmacro defun-for-type (name args types &body body)
  `(progn ,@(mapcar #'(lambda (type)
                        `(defun ,name ,args
                          (declare ,@(mapcar #'(lambda (arg)
                                                 `(,type ,arg))
                                             (mapcan #'(lambda (arg)
                                                         (cond ((eq arg '&optional) (list))
                                                               ((consp arg) (list (first arg)))
                                                               (t (list arg))))
                                                     args)))
                          ,@body))
                    types)))

(defun-for-type gcd (a b) (int long bignum)
  (if (= b 0)
      (abs a)
      (gcd b (rem a b))))

(defun-for-type lcd (a b) (int long bignum)
  (if (or (= a 0) (= b 0))
      0
      (/ (abs (* a b)) (gcd a b))))

;;Basic loop for isqrt
;; (loop for r upfrom 0
;;        while (> n r)
;;        do (decf n r)
;;        finally (return r))

(defun isqrt (n/int)
  (let ((n (floor (1+ n) 2)))
    (do ((r 0 (1+ r)))
        ((<= n r) r)
      (decf n r))))

(defun isqrt (n/long)
  (let ((n (floor (1+ n) 2)))
    (do ((r 0L (1+ r)))
        ((<= n r) r)
      (decf n r))))

(defun isqrt (n/bignum)
  (let ((n (floor (1+ n) 2)))
    (do ((r 0Big (1+ r)))
        ((<= n r) r)
      (decf n r))))

(defconstant pi (in (the math) +pi+))

(defun-for-type rational (e) (long float double big-decimal)
  (rationalize e))

(defun rationalize (e/long)
  (in (the bignum)
      (value-of e)))

;;This (format nil ...) nonsense is done to avoid the errors
;;introduced in the conversion of float or double to big-decimal.
(defun rationalize (e/float)
  (rationalize (new 'big-decimal (format nil "~A" e))))

(defun rationalize (e/double)
  (rationalize (new 'big-decimal (format nil "~A" e))))

;; (defun rationalize (x/big-decimal)
;;   (cond ((minusp x) (- (rationalize (- x))))
;;      ((zerop x) 0)
;;      (t
;;       (let ((eps 1.0e-400Bigdec) ;;I can go as small as 1.0d-323
;;             (y 0Bigdec)
;;             (a 0Bigint))
;;         (do ((xx x (setq y (/ (set-scale 1.0Bigdec (scale x)) (- xx (set-scale (new 'big-decimal a) (scale x))))))
;;              (num (setq a (to-big-integer x))
;;                   (+ (* (setq a (to-big-integer y)) num) onum))
;;              (den 1Bigint (+ (* a den) oden))
;;              (onum 1Bigint num)
;;              (oden 0Bigint den))
;;             ((or (= xx a)
;;                  (and (not (zerop den))
;;                       (not (> (abs (/ (- x (/ (set-scale (new 'big-decimal num) (scale x))
;;                                               (new 'big-decimal den)))
;;                                       x))
;;                               eps))))
;;              (in (the bignum)
;;                  (fraction num den))))))))

(defun shift (a/int b/int) ;;Computed ash
  (cond ((< 0 b 32)
         (<< a b))
        ((< -32 b 0)
         (>> a (- b)))
        ((= b 0)
         a)
        ((>= b 32)
         0)
        (t
         (if (> a 0)
             0
             -1))))

(defun shift (a/long b/int) ;;Computed ash
  (cond ((< 0 b 64)
         (<< a b))
        ((< -64 b 0)
         (>> a (- b)))
        ((= b 0)
         a)
        ((>= b 64)
         0L)
        (t
         (if (> a 0)
             0L
             -1L))))

(defun-for-type mod (a b) (int long bignum float double)
  (if (< (* a b) 0)
    (+ (rem a b) b)
    (rem a b)))

(defun-for-type truncate (a &optional (b 1)) (int long )
  (let ((quo (/ a b)))
    (values quo (- a (* quo b)))))

;; (defun main ()
;;   (print (rationalize 0.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001Bigdec))
;;   (print (rationalize 0.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d0))
;;   (print (rationalize 0.10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)))


;; (defun output-integer-to-string (integer/long print-base/int)
;;   (when (and (not (= *print-base* 10.))
;;           *print-radix*)
;;     ;; First print leading base information, if any.
;;     (write-char #\# stream)
;;     (write-char (case *print-base*
;;                (2.  #\b)
;;                (8.  #\o)
;;                (16. #\x)
;;                (T (let ((fixbase *print-base*)
;;                         (*print-base* 10.)
;;                         (*print-radix* ()))
;;                     (sub-output-integer fixbase stream))
;;                   #\r))
;;              stream))
;;   ;; Then output a minus sign if the number is negative, then output
;;   ;; the absolute value of the number.
;;   (cond ((bignump integer) (print-bignum integer stream))
;;      ((< integer 0)
;;       (write-char #\- stream)
;;       (sub-output-integer (- integer) stream))
;;      (t
;;       (sub-output-integer integer stream)))
;;   ;; Print any trailing base information, if any.
;;   (if (and (= *print-base* 10.) *print-radix*)
;;       (write-char #\. stream)))

;; (defun sub-output-integer-to-string (integer/long print-base/int)
;;   (let ((quotient ())
;;      (remainder ()))
;;     ;; Recurse until you have all the digits pushed on the stack.
;;     (if (not (zerop (multiple-value-setq (quotient remainder)
;;                    (truncate integer *print-base*))))
;;      (sub-output-integer quotient stream))
;;     ;; Then as each recursive call unwinds, turn the digit (in remainder)
;;     ;; into a character and output the character.
;;     (write-char (code-char (if (and (> remainder 9.)
;;                                  (> *print-base* 10.))
;;                             (+ (char-code #\A) (- remainder 10.))
;;                             (+ (char-code #\0) remainder)))
;;              stream)))

(defun format-print-integer-to-string (number/long print-commas-p/boolean print-sign-p/boolean
                                       radix/int mincol/int padchar/char commachar/char commainterval/int)
  (let* ((text (in (the Long) (to-string (abs number) radix)))
         (commaed (if print-commas-p
                    (format-add-commas text commachar commainterval)
                    text))
         (signed (cond ((minusp number)
                        (concatenate 'string "-" commaed))
                       (print-sign-p
                        (concatenate 'string "+" commaed))
                       (t commaed))))
    ;; colinc = 1, minpad = 0, padleft = t
    (format-write-field-to-string signed mincol 1 0 padchar t)))

(defun format-add-commas (string/string commachar/char commainterval/int)
;;  (declare (trace))
  (let ((length (length string)))
    (multiple-value-bind (commas extra)
                         (truncate (1- length) commainterval)
;;      (format *trace-output* "commas:~A extra:~A~%" commas extra)
      (let ((new-string (new 'string-buffer (+ length commas)))
            (first-comma (1+ extra)))
;;	(format *trace-output* "new-string:'~A'~%" new-string)
        (set-length new-string (+ length commas))
        (let ((replacement (substring string 0 first-comma)))
          (replace new-string 0 first-comma replacement))
;;	(format *trace-output* "new-string:'~A'~%" new-string)
        (do ((src first-comma (+ src commainterval))
             (dst first-comma (+ dst commainterval 1)))
            ((= src length))
          (set-char-at new-string dst commachar)
          (let ((replacement (substring string src (+ src commainterval))))
            (replace new-string
                     (1+ dst)
                     (min (length new-string) (+ 1 dst (length replacement)))
                     replacement)))
;;	(format *trace-output* "new-string:'~A'~%" new-string)
        (to-string new-string)))))

(defun format-write-field-to-string (string/string mincol/int colinc/int minpad/int padchar/char padleft/boolean)
;;  (declare (trace))
  (let ((str (new 'string-buffer)))
    (setq minpad (max 0 minpad))
    (unless padleft
      (append str string))
    (dotimes (i minpad)
      (append str padchar))
    (do ((chars (+ (length string) minpad) (+ chars colinc)))
        ((>= chars mincol))
      (dotimes (i colinc)
        (append str padchar)))
    (when padleft
     (append str string))
    (to-string str)))


;;;Ordinal/cardinal stuff

;; (defun format-print-cardinal-to-string (n/long)
;;   (let ((str (new 'string-buffer)))
;;     (cond ((minusp n)
;;         (append str "negative ")
;;         (format-print-cardinal-aux str (- n) 0 n))
;;        ((zerop n)
;;         (append str "zero"))
;;        (t
;;         (format-print-cardinal-aux str n 0 n)))
;;     (to-string str)))

;; (defconstant cardinal-ones
;;   #(nil "one" "two" "three" "four" "five" "six" "seven" "eight" "nine"))

;; (defconstant cardinal-tens
;;   #(nil nil "twenty" "thirty" "forty"
;;      "fifty" "sixty" "seventy" "eighty" "ninety"))

;; (defconstant cardinal-teens
;;   #("ten" "eleven" "twelve" "thirteen" "fourteen"
;;     "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"))

;; (defconstant cardinal-periods
;;   #("" " thousand" " million" " billion" " trillion" " quadrillion"
;;     " quintillion" " sextillion" " septillion" " octillion" " nonillion"
;;     " decillion" " undecillion" " duodecillion" " tredecillion"
;;     " quattuordecillion" " quindecillion" " sexdecillion" " septendecillion"
;;     " octodecillion" " novemdecillion" " vigintillion"))

;; (defconstant ordinal-ones
;;   #(nil "first" "second" "third" "fourth"
;;      "fifth" "sixth" "seventh" "eighth" "ninth")
;;   "Table of ordinal ones-place digits in English")

;; (defconstant ordinal-tens
;;   #(nil "tenth" "twentieth" "thirtieth" "fortieth"
;;      "fiftieth" "sixtieth" "seventieth" "eightieth" "ninetieth")
;;   "Table of ordinal tens-place digits in English")

;; (defun format-print-small-cardinal (str/string-buffer n/long)
;;   (multiple-value-bind (hundreds rem)
;;       (truncate n 100)
;;     (when (plusp hundreds)
;;       (append str (svref cardinal-ones hundreds))
;;       (append str " hundred")
;;       (when (plusp rem)
;;      (append str #\space)))
;;     (when (plusp rem)
;;       (multiple-value-bind (tens ones)
;;        (truncate rem 10)
;;      (cond ((< 1 tens)
;;             (append str (svref cardinal-tens tens))
;;             (when (plusp ones)
;;               (append str #\-)
;;               (append str (svref cardinal-ones ones))))
;;            ((= tens 1)
;;             (append str (svref cardinal-teens ones)))
;;            ((plusp ones)
;;             (append str (svref cardinal-ones ones))))))))

;; (defun format-print-cardinal-aux (str/string-buffer n/long period/int err/long)
;;   (multiple-value-bind (beyond here)
;;       (truncate n 1000)
;;     (unless (<= period 20)
;;       (error "Number too large to print in English: ~:D" err))
;;     (unless (zerop beyond)
;;       (format-print-cardinal-aux str beyond (1+ period) err))
;;     (unless (zerop here)
;;       (unless (zerop beyond)
;;      (append str #\space))
;;       (format-print-small-cardinal str here)
;;       (append str (svref cardinal-periods period)))))

;; (defun format-print-ordinal-to-string (n/long)
;;   (let ((str (new 'string-buffer)))
;;     (when (minusp n)
;;       (append str "negative "))
;;     (let ((number (abs n)))
;;       (multiple-value-bind (top bot)
;;        (truncate number 100)
;;      (unless (zerop top)
;;        (append str (format-print-cardinal-to-string (- number bot))))
;;      (when (and (plusp top) (plusp bot))
;;        (append str #\space))
;;      (multiple-value-bind (tens ones)
;;          (truncate bot 10)
;;        (cond ((= bot 12)
;;               (append str "twelfth"))
;;              ((= tens 1)
;;               (append str (svref cardinal-teens ones));;;RAD
;;               (append str "th"))
;;              ((and (zerop tens) (plusp ones))
;;               (append str (svref ordinal-ones ones)))
;;              ((and (zerop ones)(plusp tens))
;;               (append str (svref ordinal-tens tens)))
;;              ((plusp bot)
;;               (append str (svref cardinal-tens tens))
;;               (append str #\-)
;;               (append str (svref ordinal-ones ones)))
;;              ((plusp number)
;;               (append str "th"))
;;              (t
;;               (append str "zeroth"))))))
;;     (to-string str)))

;;; Print Roman numerals

(defun format-print-old-roman-to-string (n/long)
  (unless (< 0 n 5000)
    (error "Number too large to print in old Roman numerals: ~:D" n))
  (let ((str (new 'string-buffer))
        (chars #(#\M #\D #\C #\L #\X #\V #\I))
        (vals #(1000 500 100 50 10 5 1))
        (start n))
    (dotimes (i (length chars))
      (let ((cur-char (svref chars i))
            (cur-val (svref vals i)))
        (do ((v start (- v cur-val)))
            ((< v cur-val) (setf start v))
          (append str cur-char)))
      (when (zerop start)
        (return)))
    (to-string str)))

(defun format-print-roman-to-string (n/long)
  (unless (< 0 n 4000)
    (error "Number too large to print in Roman numerals: ~:D" n))
  (let ((str (new 'string-buffer))
        (chars #(#\M #\D #\C #\L #\X #\V #\I))
        (vals #(1000 500 100 50 10 5 1))
        (sub-chars #(#\C #\C #\X #\X #\I #\I))
        (sub-vals #(100 100 10 10 1 1 0))
        (start n))
    (dotimes (i (length chars))
      (let ((cur-char (svref chars i))
            (cur-val (svref vals i))
            (cur-sub-char (svref sub-chars i))
            (cur-sub-val (svref sub-vals i))
            (start n))
        (do ((v start (- v cur-val)))
            ((< v cur-val)
             (cond ((<= (- cur-val cur-sub-val) v)
                    (append str cur-sub-char)
                    (append str cur-char)
                    (setf start (- v (- cur-val cur-sub-val))))
                   (t (setf start v))))
          (append str cur-char))
        (when (zerop start)
          (return))))
    (to-string str)))
